/**
 * @fileoverview gRPC-Web generated client stub for leishmaniapp.cloud.diagnoses
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: diagnoses.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as diagnoses_pb from './diagnoses_pb'; // proto import: "diagnoses.proto"
import * as model_pb from './model_pb'; // proto import: "model.proto"
import * as types_pb from './types_pb'; // proto import: "types.proto"


export class DiagnosesServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorStoreDiagnosis = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.diagnoses.DiagnosesService/StoreDiagnosis',
    grpcWeb.MethodType.UNARY,
    model_pb.Diagnosis,
    types_pb.StatusResponse,
    (request: model_pb.Diagnosis) => {
      return request.serializeBinary();
    },
    types_pb.StatusResponse.deserializeBinary
  );

  storeDiagnosis(
    request: model_pb.Diagnosis,
    metadata?: grpcWeb.Metadata | null): Promise<types_pb.StatusResponse>;

  storeDiagnosis(
    request: model_pb.Diagnosis,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<types_pb.StatusResponse>;

  storeDiagnosis(
    request: model_pb.Diagnosis,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.diagnoses.DiagnosesService/StoreDiagnosis',
        request,
        metadata || {},
        this.methodDescriptorStoreDiagnosis,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.diagnoses.DiagnosesService/StoreDiagnosis',
    request,
    metadata || {},
    this.methodDescriptorStoreDiagnosis);
  }

  methodDescriptorGetDiagnosis = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.diagnoses.DiagnosesService/GetDiagnosis',
    grpcWeb.MethodType.UNARY,
    diagnoses_pb.DiagnosisRequest,
    diagnoses_pb.DiagnosisResponse,
    (request: diagnoses_pb.DiagnosisRequest) => {
      return request.serializeBinary();
    },
    diagnoses_pb.DiagnosisResponse.deserializeBinary
  );

  getDiagnosis(
    request: diagnoses_pb.DiagnosisRequest,
    metadata?: grpcWeb.Metadata | null): Promise<diagnoses_pb.DiagnosisResponse>;

  getDiagnosis(
    request: diagnoses_pb.DiagnosisRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: diagnoses_pb.DiagnosisResponse) => void): grpcWeb.ClientReadableStream<diagnoses_pb.DiagnosisResponse>;

  getDiagnosis(
    request: diagnoses_pb.DiagnosisRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: diagnoses_pb.DiagnosisResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.diagnoses.DiagnosesService/GetDiagnosis',
        request,
        metadata || {},
        this.methodDescriptorGetDiagnosis,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.diagnoses.DiagnosesService/GetDiagnosis',
    request,
    metadata || {},
    this.methodDescriptorGetDiagnosis);
  }

}

