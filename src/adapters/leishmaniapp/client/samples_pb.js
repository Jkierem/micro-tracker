// source: samples.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var model_pb = require('./model_pb.js');
goog.object.extend(proto, model_pb);
var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.leishmaniapp.cloud.samples.ImageSampleRequest', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.samples.SampleRequest', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.samples.SampleResponse', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.samples.UndeliveredRequest', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.samples.UndeliveredResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.samples.ImageSampleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.samples.ImageSampleRequest.displayName = 'proto.leishmaniapp.cloud.samples.ImageSampleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.samples.SampleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.samples.SampleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.samples.SampleRequest.displayName = 'proto.leishmaniapp.cloud.samples.SampleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.samples.SampleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.samples.SampleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.samples.SampleResponse.displayName = 'proto.leishmaniapp.cloud.samples.SampleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.samples.UndeliveredRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.samples.UndeliveredRequest.displayName = 'proto.leishmaniapp.cloud.samples.UndeliveredRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.leishmaniapp.cloud.samples.UndeliveredResponse.repeatedFields_, null);
};
goog.inherits(proto.leishmaniapp.cloud.samples.UndeliveredResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.samples.UndeliveredResponse.displayName = 'proto.leishmaniapp.cloud.samples.UndeliveredResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.samples.ImageSampleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sample: (f = msg.getSample()) && model_pb.Sample.toObject(includeInstance, f),
    image: (f = msg.getImage()) && types_pb.ImageBytes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.samples.ImageSampleRequest}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.samples.ImageSampleRequest;
  return proto.leishmaniapp.cloud.samples.ImageSampleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.samples.ImageSampleRequest}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_pb.Sample;
      reader.readMessage(value,model_pb.Sample.deserializeBinaryFromReader);
      msg.setSample(value);
      break;
    case 2:
      var value = new types_pb.ImageBytes;
      reader.readMessage(value,types_pb.ImageBytes.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.samples.ImageSampleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSample();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_pb.Sample.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_pb.ImageBytes.serializeBinaryToWriter
    );
  }
};


/**
 * optional leishmaniapp.cloud.model.Sample sample = 1;
 * @return {?proto.leishmaniapp.cloud.model.Sample}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.getSample = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Sample} */ (
    jspb.Message.getWrapperField(this, model_pb.Sample, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Sample|undefined} value
 * @return {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} returns this
*/
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.setSample = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} returns this
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.clearSample = function() {
  return this.setSample(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.hasSample = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional leishmaniapp.cloud.types.ImageBytes image = 2;
 * @return {?proto.leishmaniapp.cloud.types.ImageBytes}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.getImage = function() {
  return /** @type{?proto.leishmaniapp.cloud.types.ImageBytes} */ (
    jspb.Message.getWrapperField(this, types_pb.ImageBytes, 2));
};


/**
 * @param {?proto.leishmaniapp.cloud.types.ImageBytes|undefined} value
 * @return {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} returns this
*/
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.samples.ImageSampleRequest} returns this
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.samples.ImageSampleRequest.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.samples.SampleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.samples.SampleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.samples.SampleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.SampleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagnosis: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sample: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.samples.SampleRequest}
 */
proto.leishmaniapp.cloud.samples.SampleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.samples.SampleRequest;
  return proto.leishmaniapp.cloud.samples.SampleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.samples.SampleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.samples.SampleRequest}
 */
proto.leishmaniapp.cloud.samples.SampleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiagnosis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSample(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.samples.SampleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.samples.SampleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.samples.SampleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.SampleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagnosis();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSample();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string diagnosis = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.samples.SampleRequest.prototype.getDiagnosis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.samples.SampleRequest} returns this
 */
proto.leishmaniapp.cloud.samples.SampleRequest.prototype.setDiagnosis = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 sample = 2;
 * @return {number}
 */
proto.leishmaniapp.cloud.samples.SampleRequest.prototype.getSample = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.leishmaniapp.cloud.samples.SampleRequest} returns this
 */
proto.leishmaniapp.cloud.samples.SampleRequest.prototype.setSample = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.samples.SampleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.samples.SampleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.SampleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && types_pb.StatusResponse.toObject(includeInstance, f),
    sample: (f = msg.getSample()) && model_pb.Sample.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.samples.SampleResponse}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.samples.SampleResponse;
  return proto.leishmaniapp.cloud.samples.SampleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.samples.SampleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.samples.SampleResponse}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.StatusResponse;
      reader.readMessage(value,types_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new model_pb.Sample;
      reader.readMessage(value,model_pb.Sample.deserializeBinaryFromReader);
      msg.setSample(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.samples.SampleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.samples.SampleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.SampleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.StatusResponse.serializeBinaryToWriter
    );
  }
  f = message.getSample();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      model_pb.Sample.serializeBinaryToWriter
    );
  }
};


/**
 * optional leishmaniapp.cloud.types.StatusResponse status = 1;
 * @return {?proto.leishmaniapp.cloud.types.StatusResponse}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.getStatus = function() {
  return /** @type{?proto.leishmaniapp.cloud.types.StatusResponse} */ (
    jspb.Message.getWrapperField(this, types_pb.StatusResponse, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.types.StatusResponse|undefined} value
 * @return {!proto.leishmaniapp.cloud.samples.SampleResponse} returns this
*/
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.samples.SampleResponse} returns this
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional leishmaniapp.cloud.model.Sample sample = 2;
 * @return {?proto.leishmaniapp.cloud.model.Sample}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.getSample = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Sample} */ (
    jspb.Message.getWrapperField(this, model_pb.Sample, 2));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Sample|undefined} value
 * @return {!proto.leishmaniapp.cloud.samples.SampleResponse} returns this
*/
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.setSample = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.samples.SampleResponse} returns this
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.clearSample = function() {
  return this.setSample(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.samples.SampleResponse.prototype.hasSample = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.samples.UndeliveredRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.samples.UndeliveredRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    specialist: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredRequest}
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.samples.UndeliveredRequest;
  return proto.leishmaniapp.cloud.samples.UndeliveredRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.samples.UndeliveredRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredRequest}
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpecialist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.samples.UndeliveredRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.samples.UndeliveredRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpecialist();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string specialist = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.prototype.getSpecialist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredRequest} returns this
 */
proto.leishmaniapp.cloud.samples.UndeliveredRequest.prototype.setSpecialist = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.samples.UndeliveredResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && types_pb.StatusResponse.toObject(includeInstance, f),
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    model_pb.Sample.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredResponse}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.samples.UndeliveredResponse;
  return proto.leishmaniapp.cloud.samples.UndeliveredResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredResponse}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.StatusResponse;
      reader.readMessage(value,types_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new model_pb.Sample;
      reader.readMessage(value,model_pb.Sample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.samples.UndeliveredResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.StatusResponse.serializeBinaryToWriter
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      model_pb.Sample.serializeBinaryToWriter
    );
  }
};


/**
 * optional leishmaniapp.cloud.types.StatusResponse status = 1;
 * @return {?proto.leishmaniapp.cloud.types.StatusResponse}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.getStatus = function() {
  return /** @type{?proto.leishmaniapp.cloud.types.StatusResponse} */ (
    jspb.Message.getWrapperField(this, types_pb.StatusResponse, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.types.StatusResponse|undefined} value
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} returns this
*/
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} returns this
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated leishmaniapp.cloud.model.Sample samples = 2;
 * @return {!Array<!proto.leishmaniapp.cloud.model.Sample>}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.getSamplesList = function() {
  return /** @type{!Array<!proto.leishmaniapp.cloud.model.Sample>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_pb.Sample, 2));
};


/**
 * @param {!Array<!proto.leishmaniapp.cloud.model.Sample>} value
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} returns this
*/
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.setSamplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.leishmaniapp.cloud.model.Sample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.leishmaniapp.cloud.model.Sample}
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.leishmaniapp.cloud.model.Sample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.leishmaniapp.cloud.samples.UndeliveredResponse} returns this
 */
proto.leishmaniapp.cloud.samples.UndeliveredResponse.prototype.clearSamplesList = function() {
  return this.setSamplesList([]);
};


goog.object.extend(exports, proto.leishmaniapp.cloud.samples);
