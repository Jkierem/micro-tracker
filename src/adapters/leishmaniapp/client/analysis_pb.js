// source: analysis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var model_pb = require('./model_pb.js');
goog.object.extend(proto, model_pb);
var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.leishmaniapp.cloud.analysis.AnalysisRequest', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.analysis.AnalysisResponse', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.analysis.AnalysisResponse.SampleCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.analysis.AnalysisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.analysis.AnalysisRequest.displayName = 'proto.leishmaniapp.cloud.analysis.AnalysisRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.leishmaniapp.cloud.analysis.AnalysisResponse.oneofGroups_);
};
goog.inherits(proto.leishmaniapp.cloud.analysis.AnalysisResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.analysis.AnalysisResponse.displayName = 'proto.leishmaniapp.cloud.analysis.AnalysisResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.analysis.AnalysisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && model_pb.ImageMetadata.toObject(includeInstance, f),
    image: (f = msg.getImage()) && types_pb.ImageBytes.toObject(includeInstance, f),
    specialist: (f = msg.getSpecialist()) && model_pb.Specialist.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.analysis.AnalysisRequest;
  return proto.leishmaniapp.cloud.analysis.AnalysisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_pb.ImageMetadata;
      reader.readMessage(value,model_pb.ImageMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new types_pb.ImageBytes;
      reader.readMessage(value,types_pb.ImageBytes.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 3:
      var value = new model_pb.Specialist.Record;
      reader.readMessage(value,model_pb.Specialist.Record.deserializeBinaryFromReader);
      msg.setSpecialist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.analysis.AnalysisRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_pb.ImageMetadata.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_pb.ImageBytes.serializeBinaryToWriter
    );
  }
  f = message.getSpecialist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      model_pb.Specialist.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional leishmaniapp.cloud.model.ImageMetadata metadata = 1;
 * @return {?proto.leishmaniapp.cloud.model.ImageMetadata}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.getMetadata = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.ImageMetadata} */ (
    jspb.Message.getWrapperField(this, model_pb.ImageMetadata, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.ImageMetadata|undefined} value
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} returns this
*/
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} returns this
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional leishmaniapp.cloud.types.ImageBytes image = 2;
 * @return {?proto.leishmaniapp.cloud.types.ImageBytes}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.getImage = function() {
  return /** @type{?proto.leishmaniapp.cloud.types.ImageBytes} */ (
    jspb.Message.getWrapperField(this, types_pb.ImageBytes, 2));
};


/**
 * @param {?proto.leishmaniapp.cloud.types.ImageBytes|undefined} value
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} returns this
*/
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} returns this
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional leishmaniapp.cloud.model.Specialist.Record specialist = 3;
 * @return {?proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.getSpecialist = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Specialist.Record} */ (
    jspb.Message.getWrapperField(this, model_pb.Specialist.Record, 3));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Specialist.Record|undefined} value
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} returns this
*/
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.setSpecialist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisRequest} returns this
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.clearSpecialist = function() {
  return this.setSpecialist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.analysis.AnalysisRequest.prototype.hasSpecialist = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.SampleCase = {
  SAMPLE_NOT_SET: 0,
  OK: 2,
  ERROR: 3
};

/**
 * @return {proto.leishmaniapp.cloud.analysis.AnalysisResponse.SampleCase}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.getSampleCase = function() {
  return /** @type {proto.leishmaniapp.cloud.analysis.AnalysisResponse.SampleCase} */(jspb.Message.computeOneofCase(this, proto.leishmaniapp.cloud.analysis.AnalysisResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.analysis.AnalysisResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && types_pb.StatusResponse.toObject(includeInstance, f),
    ok: (f = msg.getOk()) && model_pb.Sample.WithoutStage.toObject(includeInstance, f),
    error: (f = msg.getError()) && model_pb.Sample.WithError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.analysis.AnalysisResponse;
  return proto.leishmaniapp.cloud.analysis.AnalysisResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.StatusResponse;
      reader.readMessage(value,types_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new model_pb.Sample.WithoutStage;
      reader.readMessage(value,model_pb.Sample.WithoutStage.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 3:
      var value = new model_pb.Sample.WithError;
      reader.readMessage(value,model_pb.Sample.WithError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.analysis.AnalysisResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.StatusResponse.serializeBinaryToWriter
    );
  }
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      model_pb.Sample.WithoutStage.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      model_pb.Sample.WithError.serializeBinaryToWriter
    );
  }
};


/**
 * optional leishmaniapp.cloud.types.StatusResponse status = 1;
 * @return {?proto.leishmaniapp.cloud.types.StatusResponse}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.getStatus = function() {
  return /** @type{?proto.leishmaniapp.cloud.types.StatusResponse} */ (
    jspb.Message.getWrapperField(this, types_pb.StatusResponse, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.types.StatusResponse|undefined} value
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} returns this
*/
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} returns this
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional leishmaniapp.cloud.model.Sample.WithoutStage ok = 2;
 * @return {?proto.leishmaniapp.cloud.model.Sample.WithoutStage}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.getOk = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Sample.WithoutStage} */ (
    jspb.Message.getWrapperField(this, model_pb.Sample.WithoutStage, 2));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Sample.WithoutStage|undefined} value
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} returns this
*/
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.leishmaniapp.cloud.analysis.AnalysisResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} returns this
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional leishmaniapp.cloud.model.Sample.WithError error = 3;
 * @return {?proto.leishmaniapp.cloud.model.Sample.WithError}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.getError = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Sample.WithError} */ (
    jspb.Message.getWrapperField(this, model_pb.Sample.WithError, 3));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Sample.WithError|undefined} value
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} returns this
*/
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.leishmaniapp.cloud.analysis.AnalysisResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.analysis.AnalysisResponse} returns this
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.analysis.AnalysisResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.leishmaniapp.cloud.analysis);
