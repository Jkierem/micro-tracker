/**
 * @fileoverview gRPC-Web generated client stub for leishmaniapp.cloud.auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_pb from './auth_pb'; // proto import: "auth.proto"
import * as types_pb from './types_pb'; // proto import: "types.proto"


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAuthenticate = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.auth.AuthService/Authenticate',
    grpcWeb.MethodType.UNARY,
    auth_pb.AuthRequest,
    auth_pb.AuthResponse,
    (request: auth_pb.AuthRequest) => {
      return request.serializeBinary();
    },
    auth_pb.AuthResponse.deserializeBinary
  );

  authenticate(
    request: auth_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.AuthResponse>;

  authenticate(
    request: auth_pb.AuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<auth_pb.AuthResponse>;

  authenticate(
    request: auth_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.auth.AuthService/Authenticate',
        request,
        metadata || {},
        this.methodDescriptorAuthenticate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.auth.AuthService/Authenticate',
    request,
    metadata || {},
    this.methodDescriptorAuthenticate);
  }

  methodDescriptorVerifyToken = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.auth.AuthService/VerifyToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.TokenRequest,
    types_pb.StatusResponse,
    (request: auth_pb.TokenRequest) => {
      return request.serializeBinary();
    },
    types_pb.StatusResponse.deserializeBinary
  );

  verifyToken(
    request: auth_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<types_pb.StatusResponse>;

  verifyToken(
    request: auth_pb.TokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<types_pb.StatusResponse>;

  verifyToken(
    request: auth_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.auth.AuthService/VerifyToken',
        request,
        metadata || {},
        this.methodDescriptorVerifyToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.auth.AuthService/VerifyToken',
    request,
    metadata || {},
    this.methodDescriptorVerifyToken);
  }

  methodDescriptorInvalidateSession = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.auth.AuthService/InvalidateSession',
    grpcWeb.MethodType.UNARY,
    auth_pb.TokenRequest,
    types_pb.StatusResponse,
    (request: auth_pb.TokenRequest) => {
      return request.serializeBinary();
    },
    types_pb.StatusResponse.deserializeBinary
  );

  invalidateSession(
    request: auth_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<types_pb.StatusResponse>;

  invalidateSession(
    request: auth_pb.TokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<types_pb.StatusResponse>;

  invalidateSession(
    request: auth_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.auth.AuthService/InvalidateSession',
        request,
        metadata || {},
        this.methodDescriptorInvalidateSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.auth.AuthService/InvalidateSession',
    request,
    metadata || {},
    this.methodDescriptorInvalidateSession);
  }

}

