// source: model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.leishmaniapp.cloud.model.AnalysisStage', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Diagnosis', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Diagnosis.Results', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.ImageMetadata', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Sample', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Sample.WithError', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Sample.WithoutStage', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Specialist', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Specialist.Record', null, global);
goog.exportSymbol('proto.leishmaniapp.cloud.model.Specialist.WithCredentials', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Specialist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.leishmaniapp.cloud.model.Specialist.repeatedFields_, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Specialist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Specialist.displayName = 'proto.leishmaniapp.cloud.model.Specialist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.leishmaniapp.cloud.model.Specialist.WithCredentials.repeatedFields_, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Specialist.WithCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Specialist.WithCredentials.displayName = 'proto.leishmaniapp.cloud.model.Specialist.WithCredentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Specialist.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Specialist.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Specialist.Record.displayName = 'proto.leishmaniapp.cloud.model.Specialist.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Diagnosis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Diagnosis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Diagnosis.displayName = 'proto.leishmaniapp.cloud.model.Diagnosis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Diagnosis.Results, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Diagnosis.Results.displayName = 'proto.leishmaniapp.cloud.model.Diagnosis.Results';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.ImageMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.ImageMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.ImageMetadata.displayName = 'proto.leishmaniapp.cloud.model.ImageMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Sample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Sample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Sample.displayName = 'proto.leishmaniapp.cloud.model.Sample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Sample.WithoutStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Sample.WithoutStage.displayName = 'proto.leishmaniapp.cloud.model.Sample.WithoutStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.leishmaniapp.cloud.model.Sample.WithError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.leishmaniapp.cloud.model.Sample.WithError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.leishmaniapp.cloud.model.Sample.WithError.displayName = 'proto.leishmaniapp.cloud.model.Sample.WithError';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.leishmaniapp.cloud.model.Specialist.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Specialist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Specialist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Specialist.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    diseasesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Specialist}
 */
proto.leishmaniapp.cloud.model.Specialist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Specialist;
  return proto.leishmaniapp.cloud.model.Specialist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Specialist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Specialist}
 */
proto.leishmaniapp.cloud.model.Specialist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDiseases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Specialist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Specialist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Specialist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDiseasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Specialist.WithCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    passwordHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    diseasesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    token: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Specialist.WithCredentials;
  return proto.leishmaniapp.cloud.model.Specialist.WithCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswordHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDiseases(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Specialist.WithCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPasswordHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDiseasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password_hash = 3;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.getPasswordHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.setPasswordHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string diseases = 4;
 * @return {!Array<string>}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.getDiseasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.setDiseasesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.addDiseases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.clearDiseasesList = function() {
  return this.setDiseasesList([]);
};


/**
 * optional string token = 5;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.setToken = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Specialist.WithCredentials} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.clearToken = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Specialist.WithCredentials.prototype.hasToken = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Specialist.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Specialist.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Specialist.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Specialist.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Specialist.Record;
  return proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Specialist.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Specialist.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Specialist.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Specialist.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Specialist.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.Record.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.Record} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.Record.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.Record.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist.Record} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.Record.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string diseases = 4;
 * @return {!Array<string>}
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.getDiseasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.leishmaniapp.cloud.model.Specialist} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.setDiseasesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.leishmaniapp.cloud.model.Specialist} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.addDiseases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.leishmaniapp.cloud.model.Specialist} returns this
 */
proto.leishmaniapp.cloud.model.Specialist.prototype.clearDiseasesList = function() {
  return this.setDiseasesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Diagnosis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Diagnosis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Diagnosis.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    disease: jspb.Message.getFieldWithDefault(msg, 2, ""),
    specialist: (f = msg.getSpecialist()) && proto.leishmaniapp.cloud.model.Specialist.Record.toObject(includeInstance, f),
    patientHash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    samples: jspb.Message.getFieldWithDefault(msg, 5, 0),
    date: jspb.Message.getFieldWithDefault(msg, 6, 0),
    remarks: jspb.Message.getFieldWithDefault(msg, 7, ""),
    results: (f = msg.getResults()) && proto.leishmaniapp.cloud.model.Diagnosis.Results.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis}
 */
proto.leishmaniapp.cloud.model.Diagnosis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Diagnosis;
  return proto.leishmaniapp.cloud.model.Diagnosis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Diagnosis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis}
 */
proto.leishmaniapp.cloud.model.Diagnosis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisease(value);
      break;
    case 3:
      var value = new proto.leishmaniapp.cloud.model.Specialist.Record;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinaryFromReader);
      msg.setSpecialist(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSamples(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemarks(value);
      break;
    case 8:
      var value = new proto.leishmaniapp.cloud.model.Diagnosis.Results;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.Diagnosis.Results.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Diagnosis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Diagnosis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Diagnosis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisease();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpecialist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.leishmaniapp.cloud.model.Specialist.Record.serializeBinaryToWriter
    );
  }
  f = message.getPatientHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSamples();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.leishmaniapp.cloud.model.Diagnosis.Results.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Diagnosis.Results.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Diagnosis.Results} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.toObject = function(includeInstance, msg) {
  var f, obj = {
    specialistResult: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    specialistElementsMap: (f = msg.getSpecialistElementsMap()) ? f.toObject(includeInstance, undefined) : [],
    modelResult: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    modelElementsMap: (f = msg.getModelElementsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis.Results}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Diagnosis.Results;
  return proto.leishmaniapp.cloud.model.Diagnosis.Results.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Diagnosis.Results} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis.Results}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpecialistResult(value);
      break;
    case 2:
      var value = msg.getSpecialistElementsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setModelResult(value);
      break;
    case 4:
      var value = msg.getModelElementsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Diagnosis.Results.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Diagnosis.Results} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpecialistResult();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpecialistElementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getModelResult();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getModelElementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * optional bool specialist_result = 1;
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.getSpecialistResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis.Results} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.setSpecialistResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * map<string, int32> specialist_elements = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.getSpecialistElementsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis.Results} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.clearSpecialistElementsMap = function() {
  this.getSpecialistElementsMap().clear();
  return this;
};


/**
 * optional bool model_result = 3;
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.getModelResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis.Results} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.setModelResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * map<string, int32> model_elements = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.getModelElementsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis.Results} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.Results.prototype.clearModelElementsMap = function() {
  this.getModelElementsMap().clear();
  return this;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string disease = 2;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getDisease = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setDisease = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Specialist.Record specialist = 3;
 * @return {?proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getSpecialist = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Specialist.Record} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.Specialist.Record, 3));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Specialist.Record|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
*/
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setSpecialist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.clearSpecialist = function() {
  return this.setSpecialist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.hasSpecialist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string patient_hash = 4;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getPatientHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setPatientHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 samples = 5;
 * @return {number}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getSamples = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setSamples = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint64 date = 6;
 * @return {number}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string remarks = 7;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getRemarks = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setRemarks = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.clearRemarks = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.hasRemarks = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Results results = 8;
 * @return {?proto.leishmaniapp.cloud.model.Diagnosis.Results}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.getResults = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Diagnosis.Results} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.Diagnosis.Results, 8));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Diagnosis.Results|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
*/
proto.leishmaniapp.cloud.model.Diagnosis.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Diagnosis} returns this
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Diagnosis.prototype.hasResults = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.ImageMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.ImageMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.ImageMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagnosis: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sample: jspb.Message.getFieldWithDefault(msg, 2, 0),
    disease: jspb.Message.getFieldWithDefault(msg, 3, ""),
    date: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.ImageMetadata}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.ImageMetadata;
  return proto.leishmaniapp.cloud.model.ImageMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.ImageMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.ImageMetadata}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiagnosis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSample(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisease(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.ImageMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.ImageMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.ImageMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagnosis();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSample();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDisease();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional string diagnosis = 1;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.getDiagnosis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.ImageMetadata} returns this
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.setDiagnosis = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 sample = 2;
 * @return {number}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.getSample = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.leishmaniapp.cloud.model.ImageMetadata} returns this
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.setSample = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string disease = 3;
 * @return {string}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.getDisease = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.leishmaniapp.cloud.model.ImageMetadata} returns this
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.setDisease = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 date = 4;
 * @return {number}
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.leishmaniapp.cloud.model.ImageMetadata} returns this
 */
proto.leishmaniapp.cloud.model.ImageMetadata.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Sample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Sample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Sample.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.leishmaniapp.cloud.model.ImageMetadata.toObject(includeInstance, f),
    stage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    specialist: (f = msg.getSpecialist()) && proto.leishmaniapp.cloud.model.Specialist.Record.toObject(includeInstance, f),
    resultsMap: (f = msg.getResultsMap()) ? f.toObject(includeInstance, proto.leishmaniapp.cloud.types.ListOfCoordinates.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Sample}
 */
proto.leishmaniapp.cloud.model.Sample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Sample;
  return proto.leishmaniapp.cloud.model.Sample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Sample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Sample}
 */
proto.leishmaniapp.cloud.model.Sample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.leishmaniapp.cloud.model.ImageMetadata;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.ImageMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!proto.leishmaniapp.cloud.model.AnalysisStage} */ (reader.readEnum());
      msg.setStage(value);
      break;
    case 3:
      var value = new proto.leishmaniapp.cloud.model.Specialist.Record;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinaryFromReader);
      msg.setSpecialist(value);
      break;
    case 4:
      var value = msg.getResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.leishmaniapp.cloud.types.ListOfCoordinates.deserializeBinaryFromReader, "", new proto.leishmaniapp.cloud.types.ListOfCoordinates());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Sample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Sample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Sample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.leishmaniapp.cloud.model.ImageMetadata.serializeBinaryToWriter
    );
  }
  f = message.getStage();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSpecialist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.leishmaniapp.cloud.model.Specialist.Record.serializeBinaryToWriter
    );
  }
  f = message.getResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.leishmaniapp.cloud.types.ListOfCoordinates.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Sample.WithoutStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.leishmaniapp.cloud.model.ImageMetadata.toObject(includeInstance, f),
    specialist: (f = msg.getSpecialist()) && proto.leishmaniapp.cloud.model.Specialist.Record.toObject(includeInstance, f),
    resultsMap: (f = msg.getResultsMap()) ? f.toObject(includeInstance, proto.leishmaniapp.cloud.types.ListOfCoordinates.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Sample.WithoutStage;
  return proto.leishmaniapp.cloud.model.Sample.WithoutStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.leishmaniapp.cloud.model.ImageMetadata;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.ImageMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new proto.leishmaniapp.cloud.model.Specialist.Record;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinaryFromReader);
      msg.setSpecialist(value);
      break;
    case 4:
      var value = msg.getResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.leishmaniapp.cloud.types.ListOfCoordinates.deserializeBinaryFromReader, "", new proto.leishmaniapp.cloud.types.ListOfCoordinates());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Sample.WithoutStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.leishmaniapp.cloud.model.ImageMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSpecialist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.leishmaniapp.cloud.model.Specialist.Record.serializeBinaryToWriter
    );
  }
  f = message.getResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.leishmaniapp.cloud.types.ListOfCoordinates.serializeBinaryToWriter);
  }
};


/**
 * optional ImageMetadata metadata = 1;
 * @return {?proto.leishmaniapp.cloud.model.ImageMetadata}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.getMetadata = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.ImageMetadata} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.ImageMetadata, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.ImageMetadata|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} returns this
*/
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} returns this
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Specialist.Record specialist = 3;
 * @return {?proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.getSpecialist = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Specialist.Record} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.Specialist.Record, 3));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Specialist.Record|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} returns this
*/
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.setSpecialist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} returns this
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.clearSpecialist = function() {
  return this.setSpecialist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.hasSpecialist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, leishmaniapp.cloud.types.ListOfCoordinates> results = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.leishmaniapp.cloud.types.ListOfCoordinates>}
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.getResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.leishmaniapp.cloud.types.ListOfCoordinates>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.leishmaniapp.cloud.types.ListOfCoordinates));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithoutStage} returns this
 */
proto.leishmaniapp.cloud.model.Sample.WithoutStage.prototype.clearResultsMap = function() {
  this.getResultsMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.toObject = function(opt_includeInstance) {
  return proto.leishmaniapp.cloud.model.Sample.WithError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.leishmaniapp.cloud.model.Sample.WithError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Sample.WithError.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.leishmaniapp.cloud.model.ImageMetadata.toObject(includeInstance, f),
    specialist: (f = msg.getSpecialist()) && proto.leishmaniapp.cloud.model.Specialist.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithError}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.leishmaniapp.cloud.model.Sample.WithError;
  return proto.leishmaniapp.cloud.model.Sample.WithError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.leishmaniapp.cloud.model.Sample.WithError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithError}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.leishmaniapp.cloud.model.ImageMetadata;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.ImageMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new proto.leishmaniapp.cloud.model.Specialist.Record;
      reader.readMessage(value,proto.leishmaniapp.cloud.model.Specialist.Record.deserializeBinaryFromReader);
      msg.setSpecialist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.leishmaniapp.cloud.model.Sample.WithError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.leishmaniapp.cloud.model.Sample.WithError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.leishmaniapp.cloud.model.Sample.WithError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.leishmaniapp.cloud.model.ImageMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSpecialist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.leishmaniapp.cloud.model.Specialist.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageMetadata metadata = 1;
 * @return {?proto.leishmaniapp.cloud.model.ImageMetadata}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.getMetadata = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.ImageMetadata} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.ImageMetadata, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.ImageMetadata|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithError} returns this
*/
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithError} returns this
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Specialist.Record specialist = 3;
 * @return {?proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.getSpecialist = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Specialist.Record} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.Specialist.Record, 3));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Specialist.Record|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithError} returns this
*/
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.setSpecialist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Sample.WithError} returns this
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.clearSpecialist = function() {
  return this.setSpecialist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Sample.WithError.prototype.hasSpecialist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImageMetadata metadata = 1;
 * @return {?proto.leishmaniapp.cloud.model.ImageMetadata}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.getMetadata = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.ImageMetadata} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.ImageMetadata, 1));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.ImageMetadata|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Sample} returns this
*/
proto.leishmaniapp.cloud.model.Sample.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Sample} returns this
 */
proto.leishmaniapp.cloud.model.Sample.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AnalysisStage stage = 2;
 * @return {!proto.leishmaniapp.cloud.model.AnalysisStage}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.getStage = function() {
  return /** @type {!proto.leishmaniapp.cloud.model.AnalysisStage} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.leishmaniapp.cloud.model.AnalysisStage} value
 * @return {!proto.leishmaniapp.cloud.model.Sample} returns this
 */
proto.leishmaniapp.cloud.model.Sample.prototype.setStage = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Specialist.Record specialist = 3;
 * @return {?proto.leishmaniapp.cloud.model.Specialist.Record}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.getSpecialist = function() {
  return /** @type{?proto.leishmaniapp.cloud.model.Specialist.Record} */ (
    jspb.Message.getWrapperField(this, proto.leishmaniapp.cloud.model.Specialist.Record, 3));
};


/**
 * @param {?proto.leishmaniapp.cloud.model.Specialist.Record|undefined} value
 * @return {!proto.leishmaniapp.cloud.model.Sample} returns this
*/
proto.leishmaniapp.cloud.model.Sample.prototype.setSpecialist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.leishmaniapp.cloud.model.Sample} returns this
 */
proto.leishmaniapp.cloud.model.Sample.prototype.clearSpecialist = function() {
  return this.setSpecialist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.hasSpecialist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, leishmaniapp.cloud.types.ListOfCoordinates> results = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.leishmaniapp.cloud.types.ListOfCoordinates>}
 */
proto.leishmaniapp.cloud.model.Sample.prototype.getResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.leishmaniapp.cloud.types.ListOfCoordinates>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.leishmaniapp.cloud.types.ListOfCoordinates));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.leishmaniapp.cloud.model.Sample} returns this
 */
proto.leishmaniapp.cloud.model.Sample.prototype.clearResultsMap = function() {
  this.getResultsMap().clear();
  return this;
};


/**
 * @enum {number}
 */
proto.leishmaniapp.cloud.model.AnalysisStage = {
  ERROR: 0,
  ERROR_DELIVER: 1,
  ANALYZING: 2,
  DELIVER: 3,
  ANALYZED: 4
};

goog.object.extend(exports, proto.leishmaniapp.cloud.model);
