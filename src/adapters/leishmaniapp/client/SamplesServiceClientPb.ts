/**
 * @fileoverview gRPC-Web generated client stub for leishmaniapp.cloud.samples
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: samples.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as model_pb from './model_pb'; // proto import: "model.proto"
import * as samples_pb from './samples_pb'; // proto import: "samples.proto"
import * as types_pb from './types_pb'; // proto import: "types.proto"


export class SamplesServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorStoreImageSample = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.samples.SamplesService/StoreImageSample',
    grpcWeb.MethodType.UNARY,
    samples_pb.ImageSampleRequest,
    types_pb.StatusResponse,
    (request: samples_pb.ImageSampleRequest) => {
      return request.serializeBinary();
    },
    types_pb.StatusResponse.deserializeBinary
  );

  storeImageSample(
    request: samples_pb.ImageSampleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<types_pb.StatusResponse>;

  storeImageSample(
    request: samples_pb.ImageSampleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<types_pb.StatusResponse>;

  storeImageSample(
    request: samples_pb.ImageSampleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.samples.SamplesService/StoreImageSample',
        request,
        metadata || {},
        this.methodDescriptorStoreImageSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.samples.SamplesService/StoreImageSample',
    request,
    metadata || {},
    this.methodDescriptorStoreImageSample);
  }

  methodDescriptorUpdateSample = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.samples.SamplesService/UpdateSample',
    grpcWeb.MethodType.UNARY,
    model_pb.Sample,
    types_pb.StatusResponse,
    (request: model_pb.Sample) => {
      return request.serializeBinary();
    },
    types_pb.StatusResponse.deserializeBinary
  );

  updateSample(
    request: model_pb.Sample,
    metadata?: grpcWeb.Metadata | null): Promise<types_pb.StatusResponse>;

  updateSample(
    request: model_pb.Sample,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<types_pb.StatusResponse>;

  updateSample(
    request: model_pb.Sample,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: types_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.samples.SamplesService/UpdateSample',
        request,
        metadata || {},
        this.methodDescriptorUpdateSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.samples.SamplesService/UpdateSample',
    request,
    metadata || {},
    this.methodDescriptorUpdateSample);
  }

  methodDescriptorGetSample = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.samples.SamplesService/GetSample',
    grpcWeb.MethodType.UNARY,
    samples_pb.SampleRequest,
    samples_pb.SampleResponse,
    (request: samples_pb.SampleRequest) => {
      return request.serializeBinary();
    },
    samples_pb.SampleResponse.deserializeBinary
  );

  getSample(
    request: samples_pb.SampleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<samples_pb.SampleResponse>;

  getSample(
    request: samples_pb.SampleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: samples_pb.SampleResponse) => void): grpcWeb.ClientReadableStream<samples_pb.SampleResponse>;

  getSample(
    request: samples_pb.SampleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: samples_pb.SampleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.samples.SamplesService/GetSample',
        request,
        metadata || {},
        this.methodDescriptorGetSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.samples.SamplesService/GetSample',
    request,
    metadata || {},
    this.methodDescriptorGetSample);
  }

  methodDescriptorDeleteSample = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.samples.SamplesService/DeleteSample',
    grpcWeb.MethodType.UNARY,
    samples_pb.SampleRequest,
    samples_pb.SampleResponse,
    (request: samples_pb.SampleRequest) => {
      return request.serializeBinary();
    },
    samples_pb.SampleResponse.deserializeBinary
  );

  deleteSample(
    request: samples_pb.SampleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<samples_pb.SampleResponse>;

  deleteSample(
    request: samples_pb.SampleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: samples_pb.SampleResponse) => void): grpcWeb.ClientReadableStream<samples_pb.SampleResponse>;

  deleteSample(
    request: samples_pb.SampleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: samples_pb.SampleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.samples.SamplesService/DeleteSample',
        request,
        metadata || {},
        this.methodDescriptorDeleteSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.samples.SamplesService/DeleteSample',
    request,
    metadata || {},
    this.methodDescriptorDeleteSample);
  }

  methodDescriptorGetUndeliveredBySpecialist = new grpcWeb.MethodDescriptor(
    '/leishmaniapp.cloud.samples.SamplesService/GetUndeliveredBySpecialist',
    grpcWeb.MethodType.UNARY,
    samples_pb.UndeliveredRequest,
    samples_pb.UndeliveredResponse,
    (request: samples_pb.UndeliveredRequest) => {
      return request.serializeBinary();
    },
    samples_pb.UndeliveredResponse.deserializeBinary
  );

  getUndeliveredBySpecialist(
    request: samples_pb.UndeliveredRequest,
    metadata?: grpcWeb.Metadata | null): Promise<samples_pb.UndeliveredResponse>;

  getUndeliveredBySpecialist(
    request: samples_pb.UndeliveredRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: samples_pb.UndeliveredResponse) => void): grpcWeb.ClientReadableStream<samples_pb.UndeliveredResponse>;

  getUndeliveredBySpecialist(
    request: samples_pb.UndeliveredRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: samples_pb.UndeliveredResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/leishmaniapp.cloud.samples.SamplesService/GetUndeliveredBySpecialist',
        request,
        metadata || {},
        this.methodDescriptorGetUndeliveredBySpecialist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/leishmaniapp.cloud.samples.SamplesService/GetUndeliveredBySpecialist',
    request,
    metadata || {},
    this.methodDescriptorGetUndeliveredBySpecialist);
  }

}

